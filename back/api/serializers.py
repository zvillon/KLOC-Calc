from rest_framework import serializers
from .services import COCOMO_MODES

class ProjectInputSerializer(serializers.Serializer):
    lines_of_code = serializers.IntegerField(min_value=1, help_text="Estimated lines of code for the project.")
    project_mode = serializers.ChoiceField(choices=list(COCOMO_MODES.keys()), help_text="COCOMO project mode.")
    cost_per_person_month = serializers.FloatField(min_value=0, help_text="The fully-loaded cost of one developer for one month.")
    
    revenue_period_years = serializers.IntegerField(min_value=1, help_text="Number of years to project revenue for financial calculations.")
    projected_annual_revenue = serializers.FloatField(min_value=0, help_text="Expected revenue generated by the project per year.")
    discount_rate = serializers.FloatField(min_value=0, max_value=100, help_text="Annual discount rate for NPV calculations (e.g., 8 for 8%).")

class CocomoResultSerializer(serializers.Serializer):
    effort_person_months = serializers.FloatField()
    duration_months = serializers.FloatField()
    total_cost = serializers.FloatField()

    def to_representation(self, instance):
        data = super().to_representation(instance)
        return {
            "effort": f"{data['effort_person_months']:.2f} Person-Months",
            "duration": f"{data['duration_months']:.2f} Months",
            "estimated_cost": f"${data['total_cost']:,.2f}",
        }

class FinancialMetricsSerializer(serializers.Serializer):
    npv = serializers.FloatField(allow_null=True)
    irr = serializers.FloatField(allow_null=True)
    roi = serializers.FloatField()
    payback_period_years = serializers.FloatField(allow_null=True)

    def to_representation(self, instance):
        data = super().to_representation(instance)
        return {
            "net_present_value": f"${data['npv']:,.2f}" if data['npv'] is not None else "N/A",
            "internal_rate_of_return": f"{data['irr'] * 100:.2f}%" if data['irr'] is not None else "N/A",
            "return_on_investment": f"{data['roi'] * 100:.2f}%" if data['roi'] != float('inf') else "Infinite",
            "payback_period": f"{data['payback_period_years']:.2f} Years" if data['payback_period_years'] is not None else "Does not pay back"
        }

class CalculationOutputSerializer(serializers.Serializer):
    cocomo_estimation = CocomoResultSerializer()
    financial_analysis = FinancialMetricsSerializer()